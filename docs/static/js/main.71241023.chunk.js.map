{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","props","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"mMA+BeA,MA5Bf,SAAqBC,GAAQ,IACpBC,EAAkBD,EAAlBC,cADmB,EAESC,mBAAS,IAFlB,mBAEpBC,EAFoB,KAERC,EAFQ,KAiB3B,OACC,sBAAMC,SAVc,SAACC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKf,SACC,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfd,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,a,+BCRZG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,gDACgCC,UACpDH,GAFoB,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbf,kBAiBdM,GAjBc,4CAAH,sDCENO,EAAU,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACC,sBAAKc,UAAU,2CAAf,UACC,qBAAKC,IAAKf,EAAKgB,IAAKN,IADrB,IAC+B,4BAAIA,QCDxBO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACfd,mBAAS,CAClCqB,KAAM,GACNa,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAezC,OATAC,qBAAU,WACTxB,EAAOC,GAAUwB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACRf,KAAMkB,EACNL,SAAS,SAGT,CAACpB,IAEGqB,EDb2BK,CAAa1B,GAAjCa,EAD0B,EAChCN,KAAca,EADkB,EAClBA,QAEtB,OACC,qCACC,6BAAKpB,IACJoB,GACA,mBAAGJ,UAAU,mCAAb,yBAED,qBAAKA,UAAU,YAAf,SACEH,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAA0BA,GAAZA,EAAIC,aEXR,SAASgB,IAAgB,IAAD,EACFzC,mBAAS,CAAC,cADR,mBAC/B0C,EAD+B,KACnB3C,EADmB,KAGtC,OACC,qCACC,6CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEC2C,EAAWnB,KAAI,SAACoB,GAAD,OACf,cAAC,EAAD,CAAmB7B,SAAU6B,GAAfA,S,MCTlBC,IAASC,OAAO,cAACJ,EAAD,IAAkBK,SAASC,eAAe,W","file":"static/js/main.71241023.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction AddCategory(props) {\n\tconst { setCategories } = props;\n\tconst [inputValue, setInputValue] = useState(\"\");\n\n\tconst handleInputChange = (e) => {\n\t\tsetInputValue(e.target.value);\n\t};\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tif (inputValue.trim().length > 2) {\n\t\t\tsetCategories((cats) => [inputValue, ...cats]);\n\t\t\tsetInputValue(\"\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input type=\"text\" value={inputValue} onChange={handleInputChange} />\n\t\t</form>\n\t);\n}\n\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGif = async (category) => {\n\tconst url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(\n\t\tcategory\n\t)}&limit=10&api_key=lwukRJhjm6MjqVntNrmb7XZAFvP4L1im`;\n\n\tconst resp = await fetch(url);\n\n\tconst { data } = await resp.json();\n\n\tconst gifs = data.map((img) => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images?.downsized_medium.url,\n\t\t};\n\t});\n\n\treturn gifs;\n};\n","import React from \"react\";\n\nexport const GifItem = ({ title, url }) => {\n\treturn (\n\t\t<div className=\"card animate__animated animate__fadeInUp\">\n\t\t\t<img src={url} alt={title} />;<p>{title}</p>\n\t\t</div>\n\t);\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifItem } from \"./GifItem\";\n\nexport const GifGrid = ({ category }) => {\n\tconst { data: images, loading } = useFetchGifs(category);\n\n\treturn (\n\t\t<>\n\t\t\t<h3>{category}</h3>\n\t\t\t{loading && (\n\t\t\t\t<p className=\"animate__animated animate__pulse\">Cargando...</p>\n\t\t\t)}\n\t\t\t<div className=\"card-grid\">\n\t\t\t\t{images.map((img) => (\n\t\t\t\t\t<GifItem key={img.id} {...img} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n","import { useState, useEffect } from \"react\";\nimport { getGif } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\tconst [state, setState] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\tuseEffect(() => {\n\t\tgetGif(category).then((imgs) =>\n\t\t\tsetState({\n\t\t\t\tdata: imgs,\n\t\t\t\tloading: false,\n\t\t\t})\n\t\t);\n\t}, [category]);\n\n\treturn state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport default function GifExpertApp() {\n\tconst [categories, setCategories] = useState([\"One Punch\"]);\n\n\treturn (\n\t\t<>\n\t\t\t<h2>GifExperApp</h2>\n\t\t\t<AddCategory setCategories={setCategories} />\n\t\t\t<hr />\n\n\t\t\t{categories.map((cat) => (\n\t\t\t\t<GifGrid key={cat} category={cat} />\n\t\t\t))}\n\t\t</>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}